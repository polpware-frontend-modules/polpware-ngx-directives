{"version":3,"sources":["ng://@polpware/ngx-directives/lib/rest-window-height/rest-window-height.directive.ts","ng://@polpware/ngx-directives/lib/ngx-directives.module.ts"],"names":["RestWindowHeightDirective","el","this","bottomOffset","minHeight","fixedHeight","maxHeight","topOffset","containerClass","prototype","ngAfterViewInit","_this","setTimeout","computeHeight","onResize","event","nativeElement","style","height","bodyRect","cls","parentElement","classList","contains","findAncestorByClass","getBoundingClientRect","document","body","offset","top","window","innerHeight","core","ɵɵdirectiveInject","ElementRef","selectors","hostBindings","rf","ctx","$event","ɵɵresolveWindow","PolpNgxDirectivesModule","imports","declarations","exports"],"mappings":"qVA6BI,SAAAA,EAAoBC,GAAAC,KAAAD,GAAAA,EAPXC,KAAAC,aAAe,EACfD,KAAAE,UAAY,EACZF,KAAAG,YAAc,EACdH,KAAAI,UAAY,EACZJ,KAAAK,UAAY,EACZL,KAAAM,eAAiB,UAI1BR,EAAAS,UAAAC,gBAAA,WAAA,IAAAC,EAAAT,KACIU,YAAW,WACPD,EAAKE,oBAKbb,EAAAS,UAAAK,SADA,SACSC,GADT,IAAAJ,EAAAT,KAEIU,YAAW,WACPD,EAAKE,oBAILb,EAAAS,UAAAI,cAAR,WACI,IAAMG,EAAgBd,KAAKD,GAAGe,cAE9B,GAAId,KAAKG,YACLH,KAAKD,GAAGe,cAAcC,MAAMC,OAAShB,KAAKG,YAAc,SAD5D,CAKA,IAAIc,EACJ,GAAIjB,KAAKM,eAELW,EArDZ,SAA6BlB,EAAImB,GAC7B,KAAOnB,EAAGoB,iBACNpB,EAAKA,EAAGoB,eACDC,UAAUC,SAASH,KAI9B,OAAOnB,EA6CWuB,CAAoBR,EAAed,KAAKM,gBACrCiB,6BAEbN,EAAWO,SAASC,KAAKF,wBAG7B,IAEMG,EAFWZ,EAAcS,wBAEPI,IAAMV,EAASU,IAInCX,EAFiBY,OAAOC,YAEAH,EAAS1B,KAAKC,aAAeD,KAAKK,UAE9DW,EAAUA,EAAShB,KAAKE,UAAac,EAAShB,KAAKE,UAE/CF,KAAKI,YACLY,EAAUA,EAAShB,KAAKI,UAAaJ,KAAKI,UAAYY,GAG1DhB,KAAKD,GAAGe,cAAcC,MAAMC,OAASA,EAAS,wCAtDzClB,GAAyBgC,EAAAC,kBAAAD,EAAAE,+CAAzBlC,EAAyBmC,UAAA,CAAA,CAAA,GAAA,uBAAA,KAAAC,aAAA,SAAAC,EAAAC,GAAA,EAAAD,6CAAzBC,EAAAxB,SAAAyB,MAAgB,EAAAP,EAAAQ,uMCjB7B,SAAAC,4CAOaA,iEAAAA,IAAuBC,QAAA,CAJvB,4EAIAD,EAAuB,CAAAE,aAAA,CAL5B3C,GAAyB4C,QAAA,CAGnB5C","sourcesContent":["import { Directive, ElementRef, AfterViewInit, Input, HostListener } from '@angular/core';\n\nfunction findAncestorByClass(el, cls: string) {\n    while (el.parentElement) {\n        el = el.parentElement;\n        if (el.classList.contains(cls)) {\n            break;\n        }\n    }\n    return el;\n}\n\n/**\n * Defines a directive for setting the height of the element in question according \n * to a formula.\n * \n */\n@Directive({\n    selector: '[polpRestWindowHeight]'\n})\nexport class RestWindowHeightDirective implements AfterViewInit {\n\n    @Input() bottomOffset = 0;\n    @Input() minHeight = 0;\n    @Input() fixedHeight = 0;\n    @Input() maxHeight = 0;\n    @Input() topOffset = 0;\n    @Input() containerClass = '';\n\n    constructor(private el: ElementRef) { }\n\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.computeHeight();\n        });\n    }\n\n    @HostListener('window:resize', ['$event'])\n    onResize(event) {\n        setTimeout(() => {\n            this.computeHeight();\n        });\n    }\n\n    private computeHeight() {\n        const nativeElement = this.el.nativeElement;\n        // Case 1: fixed Height \n        if (this.fixedHeight) {\n            this.el.nativeElement.style.height = this.fixedHeight + 'px';\n            return;\n        }\n\n        let bodyRect: DOMRect;\n        if (this.containerClass) {\n            const p = findAncestorByClass(nativeElement, this.containerClass);\n            bodyRect = p.getBoundingClientRect();\n        } else {\n            bodyRect = document.body.getBoundingClientRect();\n        }\n\n        const elemRect = nativeElement.getBoundingClientRect();\n\n        const offset = elemRect.top - bodyRect.top;\n\n        const screenHeight = window.innerHeight;\n\n        let height = screenHeight - offset - this.bottomOffset - this.topOffset;\n\n        height = (height > this.minHeight) ? height : this.minHeight;\n\n        if (this.maxHeight) {\n            height = (height > this.maxHeight) ? this.maxHeight : height;\n        }\n\n        this.el.nativeElement.style.height = height + 'px';\n    }\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { RestWindowHeightDirective } from './rest-window-height/rest-window-height.directive';\n\n@NgModule({\n    declarations: [\n        RestWindowHeightDirective],\n    imports: [\n    ],\n    exports: [RestWindowHeightDirective]\n})\nexport class PolpNgxDirectivesModule { }\n"]}